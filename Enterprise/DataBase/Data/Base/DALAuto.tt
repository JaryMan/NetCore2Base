<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ include file="../DBSchema.ttinclude"#>
<#@ include file="../MultiDocument.ttinclude"#>
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>

<#
    var dbSchema=DBSchemaFactory.GetDBSchema();
    List<string> tableList=dbSchema.GetTablesList();
    foreach(string tableName in tableList)
    {
        manager.StartBlock(tableName+"Data.cs");
        Table table=dbSchema.GetTableMetadata(tableName);
#>
using AspNetCore.Demo.Enterprise.DataBase.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Dapper;
using System.Text;



namespace AspNetCore.Demo.Enterprise.DataBase.Data
{
    public partial class <#=tableName#>Data
    {
        /// <summary>
        /// 根据ID查询信息
        /// </summary>
        /// <returns></returns>
        public <#=tableName#> QueryForId(<#=tableName#> entity)
        {
            using(var dbConnection = new DbConnection())
            {
                return dbConnection.connection.QueryFirstOrDefault<<#=tableName#>>("select * from <#=tableName#> where Id=@Id and IsDelete=0", new { Id = entity.Id });
            }
        }

        /// <summary>
        /// 查询所有
        /// </summary>
        /// <returns></returns>
        public IList<<#=tableName#>> QueryAll()
        {
            using(var dbConnection = new DbConnection())
            {
                return dbConnection.connection.Query<<#=tableName#>>("select * from <#=tableName#> where IsDelete=0").ToList();
            }
        }

        /// <summary>
        /// 根据查询数量获取记录
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        public IList<<#=tableName#>> QueryForCount(int count)
        {
            using(var dbConnection = new DbConnection())
            {
                var sqlStr = string.Format("select top {0} * from <#=tableName#> where IsDelete=0", count);
                return dbConnection.connection.Query<<#=tableName#>>(sqlStr).ToList();
            }
        }

        /// <summary>
        /// 查询总记录数
        /// </summary>
        /// <returns></returns>
        public int QueryTotalCount()
        {
            using(var dbConnection = new DbConnection())
            {
               return dbConnection.connection.QueryFirst<int>("select count(0) from <#=tableName#> where IsDelete=0");
            }
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pageIndex">页码</param>
        /// <param name="pageCount">页面大小</param>
        /// <returns></returns>
        public IList<<#=tableName#>> QueryPageList(int pageIndex, int pageCount)
        {
            using(var dbConnection = new DbConnection())
            {
                var sqlStr = string.Format("SELECT TOP {0} * FROM(SELECT ROW_NUMBER() OVER(ORDER BY id) AS RowNumber, *FROM  <#=tableName#> where IsDelete=0) A WHERE RowNumber > {0} * ({1} - 1)", pageCount, pageIndex);
                return dbConnection.connection.Query<<#=tableName#>>(sqlStr).ToList();
            }
        }

        /// <summary>
        /// 插入一条数据
        /// </summary>
        /// <param name="entity">实体对象</param>
        /// <returns></returns>
        public int Insert(<#=tableName#> entity)
        {
            if (!entity.Validator()) return 0;
            var parameters = new DynamicParameters();
            var valuesStr = new StringBuilder();
            var parametersStr = new StringBuilder();
<#
        for(int i=0;i<table.Columns.Count;i++)
        {
            if(table.Columns[i].UpColumnName=="Id")continue;            
#>
            valuesStr.Append("<#=table.Columns[i].UpColumnName#><# if(i<table.Columns.Count-1){#>,<#}#>");
            parametersStr.Append("@<#=table.Columns[i].UpColumnName#><# if(i<table.Columns.Count-1){#>,<#}#>");
            parameters.Add("@<#=table.Columns[i].UpColumnName#>", entity.<#=table.Columns[i].UpColumnName#>); 

<#
        }
#>
            using(var dbConnection = new DbConnection())
            {
                var sqlStr = string.Format("Insert Into <#=tableName#>({0}) Values({1})", valuesStr,parametersStr);
                return dbConnection.connection.Execute(sqlStr, parameters);
            }
        }
        
        /// <summary>
        /// 根据ID更新数据
        /// </summary>
        /// <returns></returns>
        public int Update(<#=tableName#> entity)
        {
            if(entity.Id == 0) return 0;
            if(!entity.Validator()) return 0;
            var parameters = new DynamicParameters();
            var updateStr = new StringBuilder();
<#
        for(int i=0;i<table.Columns.Count;i++)
        {
            if(table.Columns[i].UpColumnName=="Id")continue;            
#>
            updateStr.Append("<#=table.Columns[i].UpColumnName#>=@<#=table.Columns[i].UpColumnName#><# if(i<table.Columns.Count-1){#>,<#}#>");
            parameters.Add("@<#=table.Columns[i].UpColumnName#>", entity.<#=table.Columns[i].UpColumnName#>); 
     
<#
        }
#>          
            using(var dbConnection = new DbConnection())
            {  
                var sqlStr = string.Format("update <#=tableName#> set {0} where Id=@Id",updateStr);
                parameters.Add("@Id", entity.Id);
                return dbConnection.connection.Execute(sqlStr,parameters);
            }
        }

        /// <summary>
        /// 根据ID删除信息(isRealDel为true则真删除)
        /// </summary>
        /// <returns></returns>
        public int DeleteForId(<#=tableName#> entity,bool isRealDel)
        {
            using(var dbConnection = new DbConnection())
            {
                if(isRealDel)
                    return dbConnection.connection.Execute("Delete from  <#=tableName#> where Id=@Id", new { Id = entity.Id });
                else
                    return dbConnection.connection.Execute("Update <#=tableName#> set IsDelete=2 where Id=@Id", new { Id = entity.Id });
            }
        }
    }
}
<#
        manager.EndBlock();
    }
    dbSchema.Dispose();

    manager.Process(true);
#>